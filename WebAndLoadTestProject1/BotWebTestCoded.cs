//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAndLoadTestProject1
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
    using HelperLib;
    using JsonExtractionRule;

    [DeploymentItem("webandloadtestproject1\\TestData.csv", "webandloadtestproject1")]
    [DataSource("DataSource1", "Microsoft.VisualStudio.TestTools.DataSource.CSV", "|DataDirectory|\\webandloadtestproject1\\TestData.csv", Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAccessMethod.Sequential, Microsoft.VisualStudio.TestTools.WebTesting.DataBindingSelectColumns.SelectOnlyBoundColumns, "TestData#csv")]
    [DataBinding("DataSource1", "TestData#csv", "Utterance", "DataSource1.TestData#csv.Utterance")]
    [DataBinding("DataSource1", "TestData#csv", "ExpectedResult", "DataSource1.TestData#csv.ExpectedResult")]
    public class BotWebTestCoded : WebTest
    {
        WebTestRequestHeader authHeader = new WebTestRequestHeader("Authorization", "Bearer OAP9jxCcQkA.cwA.Mmk.QXdnkdYRPyOdmV3wj4wUBUS8Rvwt0rLgXQ4vnR57fX0");
        string botConnectorBaseUrl = "https://directline.botframework.com/v3/directline/conversations";
        string messageTemplate = "{\"type\":\"message\",\"text\":\"<text>\", \"from\":{\"id\":\"<id>\",\"name\":\"<name>\"}}";
        string userId = "test", userName = "test";

        public BotWebTestCoded()
        {
            this.PreAuthenticate = true;
            this.Proxy = "default";
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            ContextParameterExistenceRule conditionalRule1 = new ContextParameterExistenceRule();
            conditionalRule1.ContextParameterName = Constants.Context_ConvId;
            conditionalRule1.CheckForExistence = false;

            int maxIterations1 = -1;
            bool advanceDataCursors1 = false;
            this.BeginLoop(conditionalRule1, maxIterations1, advanceDataCursors1);

            string request2Url = $"{botConnectorBaseUrl}/" + "{{ConvID}}/activities";

            for (; this.ExecuteConditionalRule(conditionalRule1);)
            {
                WebTestRequest request1 = new WebTestRequest(botConnectorBaseUrl);
                request1.Method = Constants.RequestMethod_Post;
                request1.Headers.Add(authHeader);
                FormPostHttpBody request1Body = new FormPostHttpBody();
                request1.Body = request1Body;

                WebTestRequest request1Dependent1 = new WebTestRequest(request2Url);
                request1Dependent1.Method = Constants.RequestMethod_Post;
                request1Dependent1.Headers.Add(authHeader);
                StringHttpBody request1Dependent1Body = new StringHttpBody();
                request1Dependent1Body.ContentType = Constants.ContentType_ApplicationJson;
                request1Dependent1Body.InsertByteOrderMark = false;

                request1Dependent1Body.BodyString = messageTemplate.Replace("<text>", "{{DataSource1.TestData#csv.Utterance}}").Replace("<id>", userId).Replace("<name>", userName);
                request1Dependent1.Body = request1Dependent1Body;
                JsonExtractionRule extractionRule1 = new JsonExtractionRule();
                extractionRule1.Name = "id";
                extractionRule1.ContextParameterName = Constants.Context_MessageId;
                request1Dependent1.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule1.Extract);
                request1.DependentRequests.Add(request1Dependent1);
                JsonExtractionRule extractionRule2 = new JsonExtractionRule();
                extractionRule2.Name = "conversationId";
                extractionRule2.ContextParameterName = Constants.Context_ConvId;
                request1.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule2.Extract);
                yield return request1;
                request1 = null;
            }

            this.EndLoop(conditionalRule1);

            ContextParameterExistenceRule conditionalRule2 = new ContextParameterExistenceRule();
            conditionalRule2.ContextParameterName = Constants.Context_ConvId;
            conditionalRule2.CheckForExistence = true;

            this.BeginCondition(conditionalRule2);

            if (this.ExecuteConditionalRule(conditionalRule2))
            {
                StringComparisonRule conditionalRule3 = new StringComparisonRule();
                conditionalRule3.ContextParameterName = Constants.Context_BotResponseReceived;
                conditionalRule3.ComparisonOperator = StringComparisonOperator.Equality;
                conditionalRule3.Value = "false";
                conditionalRule3.IgnoreCase = true;
                conditionalRule3.UseRegularExpression = false;

                int maxIterations3 = -1;
                bool advanceDataCursors3 = false;
                this.BeginLoop(conditionalRule3, maxIterations3, advanceDataCursors3);

                for (; this.ExecuteConditionalRule(conditionalRule3);)
                {
                    WebTestRequest request2 = new WebTestRequest(request2Url);
                    request2.Method = Constants.RequestMethod_Get;
                    request2.Headers.Add(authHeader);
                    if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
                    {
                        JsonMessageIdValidationRule validationRule1 = new JsonMessageIdValidationRule();
                        request2.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
                    }
                    yield return request2;
                    request2 = null;
                }

                this.EndLoop(conditionalRule3);
            }

            this.EndCondition(conditionalRule2);
        }
    }
}
